{"version":3,"sources":["services/github.js","components/repository.js","components/repositoryList.js","components/App.js","serviceWorker.js","index.js"],"names":["getRepositories","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","languageName","since","url","response","repositoriesData","wrap","_context","prev","next","concat","fetch","sent","console","log","json","abrupt","items","slice","stop","_x","_x2","apply","this","arguments","Repository","_React$Component","classCallCheck","possibleConstructorReturn","getPrototypeOf","inherits","createClass","key","value","react_default","createElement","className","href","props","link","name","description","index_es","icon","stars","moment","createdAt","format","React","Component","library","add","faStar","faStarHalfAlt","faStarHalf","icons","RepositoryList","repos","map","repo","i","repository_Repository","full_name","created_at","stargazers_count","html_url","id","App","_this","call","languages","state","loading","selectedLanguage","repositories","subtract","_searchGithub","event","topRepos","preventDefault","setState","getDateThirtyDaysAgo","target","onSubmit","searchGithub","bind","onChange","handleLanguageSelect","lang","type","repositoryList_RepositoryList","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.258ceea0.chunk.js","sourcesContent":["export const getRepositories = async (languageName, since) => {\n  const url = `https://api.github.com/search/repositories?q=language:${languageName}+created:>${since}&sort=stars`;\n  const response = await fetch(url);\n  console.log(response);\n  const repositoriesData = await response.json();\n  return repositoriesData.items.slice(0,3);\n}","import React from \"react\";\nimport './Repository.css';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport moment from \"moment\";\n\nexport class Repository extends React.Component {\n  render() {\n    return <div className=\"Repository\">\n      <a href={this.props.link}>{this.props.name}</a>\n      <p>{this.props.description}</p>\n      <div className=\"stars\">\n      <FontAwesomeIcon\n            icon={this.props.icon} />\n        <p>{this.props.stars}</p>\n\n      </div>\n      <p>Created: {moment(this.props.createdAt).format('Do MMMM YYYY')}</p>\n    </div>\n  }\n}","\nimport React from 'react';\nimport { Repository } from './repository';\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { faStarHalfAlt, faStarHalf, faStar } from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(faStar);\nlibrary.add(faStarHalfAlt);\nlibrary.add(faStarHalf);\n//<i class=\"fas fa-star-half-alt\"></i>\nconst icons = [\"star\",\"star-half-alt\", \"star-half\"]\nexport class RepositoryList extends React.Component {\n  render() {\n    return this.props.repos.map((repo, i) => {\n      return <Repository\n        name={repo.full_name}\n        description={repo.description}\n        createdAt={repo.created_at}\n        stars={repo.stargazers_count}\n        icon={icons[i]}\n        link={repo.html_url}\n        key={repo.id}\n      >\n      </Repository>\n    })\n  }\n}","import React from 'react';\nimport './App.css';\nimport { getRepositories } from '../services/github';\nimport { RepositoryList } from './repositoryList';\nimport moment from \"moment\";\n\nexport class App extends React.Component {\n  languages = [\"JavaScript\", \"Python\", \"Java\", \"C++\", \"Swift\", \"TypeScript\", \"Go\", \"SQL\", \"HTML\", \"CSS\", \"Ruby\", \"PHP\"]\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: false,\n      selectedLanguage: this.languages[0],\n      repositories: []\n    };\n  }\n\n  getDateThirtyDaysAgo() {\n    return moment().subtract(\"30\", \"days\").format(\"YYYY-MM-DD\");\n  }\n\n  async searchGithub(event) {\n    event.preventDefault();\n    this.setState({repositories: []});\n    const topRepos = await getRepositories(this.state.selectedLanguage, this.getDateThirtyDaysAgo());\n    this.setState({repositories: topRepos});\n  }\n\n  handleLanguageSelect(event) {\n    this.setState({ selectedLanguage: event.target.value });\n  }\n\n  render() {\n    return <div className=\"App outer-grid\">\n      <header className=\"App-header\">\n        <p>Search the top 3 starred GitHub respositories by {this.state.selectedLanguage || \"language\"} created in the last 30 days</p>\n        <form onSubmit={this.searchGithub.bind(this)}>\n          <select\n            id=\"language\"\n            value={this.state.selectedLanguage || this.languages[0]}\n            onChange={this.handleLanguageSelect.bind(this)}\n          >\n            {this.languages.map(lang => {\n            return <option value={lang} key={lang}>{lang}</option>\n            })}\n          </select>\n          <input type=\"submit\" value=\"Search\" />\n        </form>\n      </header>\n      <RepositoryList\n        repos={this.state.repositories}\n        >\n      </RepositoryList>\n    </div>\n\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}