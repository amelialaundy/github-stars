{"version":3,"sources":["services/github.js","components/repository.js","components/repositoryList.js","components/App.js","serviceWorker.js","index.js"],"names":["getRepositories","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","languageName","since","url","response","body","wrap","_context","prev","next","concat","fetch","catch","err","console","error","sent","abrupt","json","ok","items","slice","stop","_x","_x2","apply","this","arguments","Repository","_React$Component","classCallCheck","possibleConstructorReturn","getPrototypeOf","inherits","createClass","key","value","react_default","createElement","className","href","props","link","name","description","react_fontawesome_index_es","icon","stars","moment","createdAt","format","React","Component","library","add","faStar","faStarHalfAlt","faStarHalf","icons","RepositoryList","repos","map","repo","i","repository_Repository","full_name","created_at","stargazers_count","html_url","id","languages","App","_this","call","state","selectedLanguage","repositories","subtract","_searchGithub","event","topRepos","preventDefault","setState","getDateThirtyDaysAgo","target","_this$state","onSubmit","searchGithub","bind","onChange","handleLanguageSelect","lang","type","repositoryList_RepositoryList","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.209a64d5.chunk.js","sourcesContent":["/* eslint-disable no-console */\nexport const getRepositories = async (languageName, since) => {\n  const url = `https://api.github.com/search/repositories?q=language:${languageName}+created:>${since}&sort=stars`;\n  const response = await fetch(url).catch((err) => {\n    console.error(\"Error retrieving repositories from GitHub API\", err);\n  });\n  if (!response) {\n    return [];\n  }\n  const body = await response.json();\n\n  if (!response.ok) {\n    console.error(\"Error retrieving repositories from GitHub API\", body);\n    return [];\n  }\n  return body.items.slice(0, 3);\n};\n","/* eslint-disable react/destructuring-assignment */\n/* eslint-disable react/prefer-stateless-function */\nimport React from \"react\";\nimport \"./Repository.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport moment from \"moment\";\n\nexport class Repository extends React.Component {\n  render() {\n    return (\n      <div className=\"Repository\">\n        <a href={this.props.link}>{this.props.name}</a>\n        <p>{this.props.description}</p>\n        <div className=\"stars\">\n          <FontAwesomeIcon\n            icon={this.props.icon}\n          />\n          <p>{this.props.stars}</p>\n\n        </div>\n        <p>\n          Created:\n          {\" \"}\n          {moment(this.props.createdAt).format(\"Do MMMM YYYY\")}\n        </p>\n      </div>\n    );\n  }\n}\n","\nimport React from \"react\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { faStarHalfAlt, faStarHalf, faStar } from \"@fortawesome/free-solid-svg-icons\";\nimport { Repository } from \"./repository\";\n\nlibrary.add(faStar);\nlibrary.add(faStarHalfAlt);\nlibrary.add(faStarHalf);\nconst icons = [\"star\", \"star-half-alt\", \"star-half\"];\nexport class RepositoryList extends React.Component {\n  render() {\n    const { repos } = this.props;\n    return repos.map((repo, i) => (\n      <Repository\n        name={repo.full_name}\n        description={repo.description}\n        createdAt={repo.created_at}\n        stars={repo.stargazers_count}\n        icon={icons[i]}\n        link={repo.html_url}\n        key={repo.id}\n      />\n    ));\n  }\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport moment from \"moment\";\nimport { getRepositories } from \"../services/github\";\nimport { RepositoryList } from \"./repositoryList\";\n\nconst languages = [\n  \"JavaScript\",\n  \"Python\",\n  \"Java\",\n  \"C++\",\n  \"Swift\",\n  \"TypeScript\",\n  \"Go\",\n  \"SQL\",\n  \"HTML\",\n  \"CSS\",\n  \"Ruby\",\n  \"PHP\"];\n\nexport class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedLanguage: languages[0],\n      repositories: [],\n    };\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getDateThirtyDaysAgo() {\n    return moment().subtract(\"30\", \"days\").format(\"YYYY-MM-DD\");\n  }\n\n  async searchGithub(event) {\n    event.preventDefault();\n    this.setState({ repositories: [] });\n    const { selectedLanguage } = this.state;\n    const topRepos = await getRepositories(selectedLanguage, this.getDateThirtyDaysAgo());\n    this.setState({ repositories: topRepos });\n  }\n\n  handleLanguageSelect(event) {\n    this.setState({ selectedLanguage: event.target.value });\n  }\n\n  render() {\n    const { selectedLanguage, repositories } = this.state;\n\n    return (\n      <div className=\"App outer-grid\">\n        <header className=\"App-header\">\n          <p>\nSearch the top 3 starred GitHub respositories by\n            {\" \"}\n            {selectedLanguage || \"language\"}\n            {\" \"}\ncreated in the last 30 days\n          </p>\n          <form onSubmit={this.searchGithub.bind(this)}>\n            <select\n              id=\"language\"\n              value={selectedLanguage}\n              onChange={this.handleLanguageSelect.bind(this)}\n            >\n              {languages.map(lang => <option value={lang} key={lang}>{lang}</option>)}\n            </select>\n            <input type=\"submit\" value=\"Search\" />\n          </form>\n        </header>\n        <RepositoryList\n          repos={repositories}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n// eslint-disable-next-line import/no-named-as-default\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}